(()=>{"use strict";const e=new class{constructor(){this.api="undefined"!=typeof chrome&&chrome.runtime?chrome:browser}handleRuntimeError(e,t,a){this.api.runtime.lastError?t(new Error(this.api.runtime.lastError.message)):e(a)}get isChrome(){return"undefined"!=typeof chrome&&!!chrome.runtime}get isFirefox(){return!this.isChrome&&"undefined"!=typeof browser&&!!browser.runtime}get manifestVersion(){return this.api.runtime.getManifest().manifest_version}get storage(){return{get:e=>new Promise((t,a)=>{this.api.storage.local.get(e,e=>{this.handleRuntimeError(t,a,e)})}),set:e=>new Promise((t,a)=>{this.api.storage.local.set(e,()=>{this.handleRuntimeError(t,a,void 0)})}),remove:e=>new Promise((t,a)=>{this.api.storage.local.remove(e,()=>{this.handleRuntimeError(t,a,void 0)})})}}get runtime(){return{sendMessage:e=>new Promise(t=>{this.api.runtime.sendMessage(e,e=>{t(e)})}),onMessage:this.api.runtime.onMessage,getManifest:()=>this.api.runtime.getManifest(),openOptionsPage:()=>this.api.runtime.openOptionsPage()}}get tabs(){return{query:e=>new Promise(t=>{this.api.tabs.query(e,t)}),sendMessage:(e,t)=>new Promise(a=>{this.api.tabs.sendMessage(e,t,e=>{a(e)})})}}get commands(){return{onCommand:this.api.commands.onCommand}}},t={openRouterApiKey:void 0,targetLanguage:"tr",fontSize:16,lineHeight:1.5,darkMode:!1,openRouterModel:"google/gemini-2.0-flash-exp:free",schemaVersion:3},a=class{async get(a){try{const r=a?await e.storage.get(a):await e.storage.get([]);return r.lineHeight&&r.lineHeight>2&&(r.lineHeight=1.5,await this.set({lineHeight:1.5})),{...t,...r}}catch(e){return console.error("StorageManager.get error:",e),t}}async set(t){try{await e.storage.set(t)}catch(e){throw console.error("StorageManager.set error:",e),e}}async remove(t){try{await e.storage.remove(t)}catch(e){throw console.error("StorageManager.remove error:",e),e}}async clear(){try{const e="undefined"!=typeof chrome?chrome:browser;return new Promise(t=>{e.storage.local.clear(()=>{t()})})}catch(e){throw console.error("StorageManager.clear error:",e),e}}async getApiKey(){try{return(await this.get(["openRouterApiKey"])).openRouterApiKey||null}catch(e){return console.error("StorageManager.getApiKey error:",e),null}}async setApiKey(e){try{await this.set({openRouterApiKey:e})}catch(e){throw console.error("StorageManager.setApiKey error:",e),e}}async getTargetLanguage(){try{return(await this.get(["targetLanguage"])).targetLanguage||t.targetLanguage}catch(e){return console.error("StorageManager.getTargetLanguage error:",e),t.targetLanguage}}async setTargetLanguage(e){try{await this.set({targetLanguage:e})}catch(e){throw console.error("StorageManager.setTargetLanguage error:",e),e}}};function r(e){return`${function(){const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")} ${String(e.getHours()).padStart(2,"0")}:${String(e.getMinutes()).padStart(2,"0")}:${String(e.getSeconds()).padStart(2,"0")}`}()} [${e}]`}const n={log(e,...t){},warn(e,...t){const a=r("WARN");console.warn(`${a} ${e}`,...t)},error(e,...t){const a=r("ERROR");console.error(`${a} ${e}`,...t)}};async function s(e,t){const{maxRetries:a,delay:r,backoff:n="exponential",onError:s}=t;let o;for(let t=0;t<=a;t++)try{return await e()}catch(e){if(o=e,s&&t<a&&s(o,t),t<a){const e="exponential"===n?r*Math.pow(2,t):r*(t+1);await new Promise(t=>setTimeout(t,e))}}throw o}const o="exponential";class i extends Error{constructor(e,t,a=!1){super(e),this.statusCode=t,this.isRateLimitError=a,this.name="ApiError"}}class c extends Error{constructor(e="Request timeout"){super(e),this.name="TimeoutError"}}class l{constructor(){this.API_ENDPOINT="https://openrouter.ai/api/v1/chat/completions",this.config=null}async initialize(){const e=new a,t=await e.get(["openRouterApiKey","openRouterModel","openRouterProvider"]);this.config={apiKey:t.openRouterApiKey||"",model:t.openRouterModel||"google/gemini-2.0-flash-exp:free",provider:t.openRouterProvider}}async translate(e,t){const a=(new Date).toISOString();if(console.log(`[Background:OpenRouterClient] ${a} - translate() called:`,{textsCount:e.length,targetLanguage:t,firstText:e[0]?.substring(0,50)}),this.config||(console.log(`[Background:OpenRouterClient] ${a} - Config not loaded, initializing...`),await this.initialize()),console.log(`[Background:OpenRouterClient] ${a} - Using config:`,{hasApiKey:!!this.config?.apiKey,apiKeyPrefix:this.config?.apiKey?.substring(0,10)+"...",model:this.config?.model,provider:this.config?.provider}),!this.config?.apiKey||""===this.config.apiKey.trim())throw console.error(`[Background:OpenRouterClient] ${a} - API key not configured or empty`),new Error("API key not configured or empty");return s(async()=>{const r=this.buildPrompt(e,t);console.log(`[Background:OpenRouterClient] ${a} - Built prompt (first 100 chars):`,{prompt:r.substring(0,100)});const s={model:this.config.model,messages:[{role:"user",content:r}]};this.config.provider&&(s.provider={order:[this.config.provider]}),console.log(`[Background:OpenRouterClient] ${a} - Making API request:`,{endpoint:this.API_ENDPOINT,model:this.config.model,hasProvider:!!this.config.provider});const o=await this.fetchWithTimeout(this.API_ENDPOINT,{method:"POST",headers:{Authorization:`Bearer ${this.config.apiKey}`,"Content-Type":"application/json","HTTP-Referer":"https://github.com/doganaylab/geminitranslate"},body:JSON.stringify(s)});if(console.log(`[Background:OpenRouterClient] ${a} - Received API response:`,{status:o.status,statusText:o.statusText,ok:o.ok}),!o.ok){const e=await o.json(),t=429===o.status;throw console.error(`[Background:OpenRouterClient] ${a} - API request failed:`,{status:o.status,statusText:o.statusText,error:e,isRateLimit:t}),n.error("OpenRouter API error:",e),new i(`API request failed: ${e.error?.message||o.statusText}`,o.status,t)}const c=await o.json();console.log(`[Background:OpenRouterClient] ${a} - Parsing API response:`,{hasChoices:!!c.choices,choicesLength:c.choices?.length,hasContent:!!c.choices?.[0]?.message?.content});const l=this.parseResponse(c.choices[0].message.content,e.length);return console.log(`[Background:OpenRouterClient] ${a} - Translation successful:`,{translationsCount:l.length,firstTranslation:l[0]?.substring(0,50)}),l},{maxRetries:3,delay:1e3,backoff:o,onError:(e,t)=>{console.warn(`[Background:OpenRouterClient] ${a} - Retry attempt ${t+1}:`,{error:e.message,attempt:t}),n.warn(`Translation attempt ${t+1} failed:`,e.message)}})}async fetchWithTimeout(e,t){const a=new AbortController,r=setTimeout(()=>a.abort(),3e4);try{const n=await fetch(e,{...t,signal:a.signal});return clearTimeout(r),n}catch(e){if(clearTimeout(r),"AbortError"===e.name)throw new c("Request timed out after 30000ms");throw e}}buildPrompt(e,t){return`Translate the following texts to ${t}. Return only the translations, one per line, without numbering:\n\n${e.join("\n")}`}parseResponse(e,t){const a=e.trim().split("\n").map(e=>e.trim()).filter(e=>e);return a.length!==t&&n.warn(`Expected ${t} translations, got ${a.length}`),a}async testConnection(){try{return this.config||await this.initialize(),this.config?.apiKey&&""!==this.config.apiKey.trim()?(await this.translate(["Hello"],"Japanese"),{success:!0,message:`Connection successful! Model: ${this.config?.model}`}):{success:!1,error:"API key is required. Please configure your OpenRouter API key."}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}}const g=class{constructor(e=1e3){this.cache=new Map,this.maxSize=e}get(e){const t=this.cache.get(e);return t?(this.cache.delete(e),t.timestamp=Date.now(),this.cache.set(e,t),t.value):null}set(e,t){if(this.cache.has(e)&&this.cache.delete(e),this.cache.size>=this.maxSize){const e=this.cache.keys().next().value;void 0!==e&&this.cache.delete(e)}this.cache.set(e,{value:t,timestamp:Date.now()})}has(e){return this.cache.has(e)}delete(e){return this.cache.delete(e)}clear(){this.cache.clear()}size(){return this.cache.size}keys(){return Array.from(this.cache.keys())}getStats(){return{size:this.cache.size,maxSize:this.maxSize,usage:this.cache.size/this.maxSize*100}}evictOlderThan(e){const t=Date.now();let a=0;for(const[r,n]of this.cache.entries())t-n.timestamp>e&&(this.cache.delete(r),a++);return a}};class h{constructor(){this.memoryCache=new g(1e3),this.BATCH_SIZE=10,this.cacheHits=0,this.cacheMisses=0,this.initialized=!1,this.apiClient=new l}async initialize(){this.initialized||(await this.apiClient.initialize(),this.initialized=!0,n.log("TranslationEngine initialized"))}async translateBatch(e,t){const a=(new Date).toISOString();if(console.log(`[Background:TranslationEngine] ${a} - translateBatch() called:`,{textsCount:e.length,targetLanguage:t,firstText:e[0]?.substring(0,50)}),!this.initialized)throw console.error(`[Background:TranslationEngine] ${a} - Engine not initialized`),new Error("TranslationEngine not initialized. Call initialize() first.");if(0===e.length)return console.log(`[Background:TranslationEngine] ${a} - Empty input, returning empty array`),[];const r=new Array(e.length),n=[];console.log(`[Background:TranslationEngine] ${a} - Checking cache for ${e.length} texts...`);for(let a=0;a<e.length;a++){const s=await this.getCachedTranslation(e[a],t);s?(r[a]=s,this.cacheHits++):(n.push(a),this.cacheMisses++)}if(console.log(`[Background:TranslationEngine] ${a} - Cache check complete:`,{cacheHits:this.cacheHits,cacheMisses:this.cacheMisses,uncachedCount:n.length}),n.length>0){const s=n.map(t=>e[t]),o=this.chunkArray(s,this.BATCH_SIZE);console.log(`[Background:TranslationEngine] ${a} - Translating ${n.length} uncached texts in ${o.length} batches`);const i=await Promise.all(o.map((e,r)=>(console.log(`[Background:TranslationEngine] ${a} - Processing batch ${r+1}/${o.length}:`,{batchSize:e.length}),this.translateWithRetry(e,t))));console.log(`[Background:TranslationEngine] ${a} - All batches processed`);const c=i.flat();console.log(`[Background:TranslationEngine] ${a} - Flattened translations:`,{count:c.length});for(let a=0;a<n.length;a++){const s=n[a],o=c[a];r[s]=o,await this.setCachedTranslation(e[s],t,o)}console.log(`[Background:TranslationEngine] ${a} - Cache updated with new translations`)}return console.log(`[Background:TranslationEngine] ${a} - translateBatch() completed:`,{resultsCount:r.length,firstResult:r[0]?.substring(0,50)}),r}async getCachedTranslation(e,t){const a=this.getCacheKey(e,t),r=this.getFromMemoryCache(a);if(r)return r;const n=this.getFromStorage(sessionStorage,a);if(n)return this.promoteToMemoryCache(a,n),n;const s=this.getFromStorage(localStorage,a);return s?(this.promoteToHigherTiers(a,s),s):null}getFromMemoryCache(e){return this.memoryCache.get(e)||null}getFromStorage(e,t){try{const a=e.getItem(t);if(a)return JSON.parse(a).translation}catch(e){n.warn(`Storage read error for key ${t}:`,e)}return null}promoteToMemoryCache(e,t){this.memoryCache.set(e,t)}promoteToHigherTiers(e,t){this.memoryCache.set(e,t);const a={text:e.split(":")[1],translation:t};this.saveToStorage(sessionStorage,e,a)}async setCachedTranslation(e,t,a){const r=this.getCacheKey(e,t),n={text:e,translation:a};this.memoryCache.set(r,a),this.saveToStorage(sessionStorage,r,n),this.saveToStorage(localStorage,r,n)}saveToStorage(e,t,a){try{e.setItem(t,JSON.stringify(a))}catch(e){n.warn(`Storage write error for key ${t}:`,e)}}getCacheKey(e,t){return`translation:${e}:${t}`}async translateWithRetry(e,t){return s(async()=>this.apiClient.translate(e,t),{maxRetries:3,delay:1e3,backoff:o,onError:(e,t)=>{n.warn(`Translation retry attempt ${t+1}:`,e.message)}})}async clearCache(e="all"){switch(e){case"memory":this.memoryCache.clear(),n.log("Memory cache cleared");break;case"session":this.clearStorageCache(sessionStorage,"Session storage");break;case"local":this.clearStorageCache(localStorage,"Local storage");break;case"all":await this.clearCache("memory"),await this.clearCache("session"),await this.clearCache("local"),n.log("All caches cleared")}}clearStorageCache(e,t){try{const a=[];for(let t=0;t<e.length;t++){const r=e.key(t);r?.startsWith("translation:")&&a.push(r)}a.forEach(t=>e.removeItem(t)),n.log(`${t} cache cleared`)}catch(e){n.error(`${t} clear error:`,e)}}async getCacheStats(){return{memory:this.memoryCache.size(),session:this.getStorageCacheSize(sessionStorage),local:this.getStorageCacheSize(localStorage),hitRate:this.calculateHitRate()}}getStorageCacheSize(e){try{let t=0;for(let a=0;a<e.length;a++){const r=e.key(a);r?.startsWith("translation:")&&t++}return t}catch(e){return n.warn("Storage access error:",e),0}}calculateHitRate(){const e=this.cacheHits+this.cacheMisses;return e>0?this.cacheHits/e*100:0}chunkArray(e,t){const a=[];for(let r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}}class d{constructor(e,t){this.engine=e,this.client=t,this.actionHandlers=new Map([["requestTranslation",this.handleRequestTranslation.bind(this)],["clearCache",this.handleClearCache.bind(this)],["getCacheStats",this.handleGetCacheStats.bind(this)],["testConnection",this.handleTestConnection.bind(this)]])}async handle(e,t,a){const r=(new Date).toISOString();console.log(`[Background:MessageHandler] ${r} - handle() called:`,{messageType:e.type,action:e.action,payload:e.payload,sender:{tabId:t.tab?.id,url:t.url}});try{const t=e.action||this.inferActionFromType(e.type);if(console.log(`[Background:MessageHandler] ${r} - Action resolved:`,{originalAction:e.action,inferredAction:this.inferActionFromType(e.type),finalAction:t}),!t)return console.error(`[Background:MessageHandler] ${r} - Invalid message format:`,{type:e.type,hasAction:!!e.action,message:e}),n.error("MessageHandler: Invalid message format",{type:e.type,hasAction:!!e.action,message:e}),a({success:!1,error:`Invalid message format: missing action property (type: ${e.type})`}),!0;const s=e.payload||{},o=this.actionHandlers.get(t);o?(console.log(`[Background:MessageHandler] ${r} - Routing to handler:`,{action:t,payload:s}),await o(s,a)):(console.error(`[Background:MessageHandler] ${r} - Unknown action:`,t),a({success:!1,error:`Unknown action: ${t}`}))}catch(e){console.error(`[Background:MessageHandler] ${r} - Unexpected error:`,{error:e,message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),n.error("MessageHandler: Unexpected error",e),a({success:!1,error:e instanceof Error?e.message:"An unexpected error occurred"})}return!0}inferActionFromType(e){return{requestTranslation:"requestTranslation",testConnection:"testConnection",clearCache:"clearCache",getCacheStats:"getCacheStats"}[e]}async handleRequestTranslation(e,t){const a=(new Date).toISOString();console.log(`[Background:MessageHandler] ${a} - handleRequestTranslation() called:`,{payload:e});try{const{texts:r,targetLanguage:n}=e;if(console.log(`[Background:MessageHandler] ${a} - Validating payload:`,{hasTexts:!!r,isArray:Array.isArray(r),textsCount:Array.isArray(r)?r.length:0,targetLanguage:n}),!r||!Array.isArray(r))return console.error(`[Background:MessageHandler] ${a} - Invalid payload: texts must be an array`),void t({success:!1,error:"Invalid payload: texts must be an array"});if(!n)return console.error(`[Background:MessageHandler] ${a} - Invalid payload: targetLanguage is required`),void t({success:!1,error:"Invalid payload: targetLanguage is required"});console.log(`[Background:MessageHandler] ${a} - Calling TranslationEngine.translateBatch():`,{textsCount:r.length,targetLanguage:n,firstText:r[0]?.substring(0,50)});const s=await this.engine.translateBatch(r,n);console.log(`[Background:MessageHandler] ${a} - Translation successful:`,{translationsCount:s.length,firstTranslation:s[0]?.substring(0,50)}),t({success:!0,data:{translations:s}})}catch(e){console.error(`[Background:MessageHandler] ${a} - Translation error:`,{error:e,message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),n.error("MessageHandler: Translation error",e),t({success:!1,error:e instanceof Error?e.message:"Translation failed"})}}async handleClearCache(e,t){try{const a=e.layer||"all";await this.engine.clearCache(a),t({success:!0,data:{message:"Cache cleared successfully"}})}catch(e){n.error("MessageHandler: Clear cache error",e),t({success:!1,error:e instanceof Error?e.message:"Failed to clear cache"})}}async handleGetCacheStats(e,t){try{t({success:!0,data:await this.engine.getCacheStats()})}catch(e){n.error("MessageHandler: Get cache stats error",e),t({success:!1,error:e instanceof Error?e.message:"Failed to get cache stats"})}}async handleTestConnection(e,t){try{t({success:!0,data:await this.client.testConnection()})}catch(e){n.error("MessageHandler: Test connection error",e),t({success:!1,error:e instanceof Error?e.message:"Connection test failed"})}}}var u;!function(e){e.TRANSLATE_PAGE="translate",e.TRANSLATE_SELECTION="translateSelection",e.TRANSLATE_CLIPBOARD="translateClipboard",e.REQUEST_TRANSLATION="requestTranslation",e.RESET="reset",e.TRANSLATION_STARTED="translationStarted",e.TRANSLATION_PROGRESS="translationProgress",e.TRANSLATION_COMPLETED="translationCompleted",e.TRANSLATION_ERROR="translationError",e.SETTINGS_CHANGED="settingsChanged",e.API_KEY_UPDATED="apiKeyUpdated",e.TEST_CONNECTION="testConnection"}(u||(u={}));class m{constructor(e,t="Japanese"){this.messageBus=e,this.targetLanguage=t,this.commandHandlers=new Map([["translate-page",this.sendTranslatePageMessage.bind(this)],["translate-selection",this.sendTranslateSelectionMessage.bind(this)],["translate-clipboard",this.sendTranslateClipboardMessage.bind(this)]])}async handle(t,a){try{let r=a;if(!r){const t=await e.tabs.query({active:!0,currentWindow:!0});if(0===t.length)return void n.warn("CommandHandler: No active tab found");r=t[0]}if(!r.id)return void n.warn("CommandHandler: Active tab has no id");const s=this.commandHandlers.get(t);s?await s(r.id):n.warn("CommandHandler: Unknown command",t)}catch(e){n.error("CommandHandler: Error handling command",e)}}async handleMessage(e,t){const a=(new Date).toISOString();console.log(`[Background:CommandHandler] ${a} - handleMessage() called:`,{messageType:e.type,tabId:t,payload:e.payload});try{let r;switch(e.type){case u.TRANSLATE_PAGE:console.log(`[Background:CommandHandler] ${a} - Routing TRANSLATE_PAGE to tab ${t}`),r=await this.sendTranslatePageMessage(t);break;case u.TRANSLATE_SELECTION:console.log(`[Background:CommandHandler] ${a} - Routing TRANSLATE_SELECTION to tab ${t}`),r=await this.sendTranslateSelectionMessage(t);break;case u.TRANSLATE_CLIPBOARD:console.log(`[Background:CommandHandler] ${a} - Routing TRANSLATE_CLIPBOARD to tab ${t}`),r=await this.sendTranslateClipboardMessage(t);break;default:return console.warn(`[Background:CommandHandler] ${a} - Unknown message type:`,e.type),n.warn("CommandHandler: Unknown message type",e.type),{success:!1,error:`Unknown message type: ${e.type}`}}return console.log(`[Background:CommandHandler] ${a} - Message sent successfully to tab ${t}`,r),r}catch(e){return console.error(`[Background:CommandHandler] ${a} - Error handling message:`,{error:e,message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),n.error("CommandHandler: Error handling message",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}async sendTranslatePageMessage(e){const t=(new Date).toISOString();console.log(`[Background:CommandHandler] ${t} - sendTranslatePageMessage() - Preparing message:`,{tabId:e,targetLanguage:this.targetLanguage});try{const a={type:u.TRANSLATE_PAGE,payload:{targetLanguage:this.targetLanguage}};console.log(`[Background:CommandHandler] ${t} - Sending to tab via MessageBus:`,{tabId:e,message:a});const r=await this.messageBus.sendToTab(e,a);return console.log(`[Background:CommandHandler] ${t} - Message sent successfully to tab ${e}`,r),r||{success:!0}}catch(a){return console.error(`[Background:CommandHandler] ${t} - Failed to send message:`,{error:a,message:a instanceof Error?a.message:"Unknown error",stack:a instanceof Error?a.stack:void 0,tabId:e}),n.error("CommandHandler: Failed to send message",a),{success:!1,error:a instanceof Error?a.message:"Unknown error"}}}async sendTranslateSelectionMessage(e){try{return await this.messageBus.sendToTab(e,{type:u.TRANSLATE_SELECTION,payload:{targetLanguage:this.targetLanguage}})||{success:!0}}catch(e){return n.error("CommandHandler: Failed to send message",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}async sendTranslateClipboardMessage(e){try{return await this.messageBus.sendToTab(e,{type:u.TRANSLATE_CLIPBOARD,payload:{targetLanguage:this.targetLanguage}})||{success:!0}}catch(e){return n.error("CommandHandler: Failed to send message",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}}}class p{constructor(){this.listeners=new Map}async send(t){const a={...t,timestamp:t.timestamp||Date.now()};return e.runtime.sendMessage(a)}async sendToTab(t,a){const r={...a,timestamp:a.timestamp||Date.now()};return e.tabs.sendMessage(t,r)}listen(t,a){const r=(e,r,n)=>(!a||e.type===a)&&(t(e,r,n)||!1);this.listeners.set(t,r),e.runtime.onMessage.addListener(r)}unlisten(t){const a=this.listeners.get(t);a&&(e.runtime.onMessage.removeListener(a),this.listeners.delete(t))}}new p,(new class{constructor(){this.messageHandler=null,this.commandHandler=null,this.engine=null,this.client=null,this.messageBus=new p}async start(){try{if(n.log("BackgroundService (Firefox): Starting..."),this.engine=new h,await this.engine.initialize(),this.client=this.engine.apiClient,!this.client)throw new Error("Failed to initialize OpenRouterClient");this.messageHandler=new d(this.engine,this.client),this.commandHandler=new m(this.messageBus),this.setupMessageListener(),this.setupCommandListener(),n.log("BackgroundService (Firefox): Started successfully")}catch(e){n.error("BackgroundService (Firefox): Failed to start",e)}}setupMessageListener(){browser.runtime.onMessage.addListener(async(e,t,a)=>{const r=(new Date).toISOString();if(console.log(`[Background:Firefox] ${r} - Received message:`,{type:e.type,action:e.action,payload:e.payload,sender:{tabId:t.tab?.id,url:t.url,frameId:t.frameId}}),"translate"===e.type||"translateSelection"===e.type||"translateClipboard"===e.type){let n=t.tab?.id;if(!n)try{const e=await browser.tabs.query({active:!0,currentWindow:!0});n=e[0]?.id,console.log(`[Background:Firefox] ${r} - Resolved active tab ID:`,n)}catch(e){console.error(`[Background:Firefox] ${r} - Failed to get active tab:`,e)}if(console.log(`[Background:Firefox] ${r} - Routing to CommandHandler:`,{messageType:e.type,tabId:n}),this.commandHandler&&n)try{const t=await this.commandHandler.handleMessage(e,n);console.log(`[Background:Firefox] ${r} - CommandHandler response:`,t),a({status:"started",...t})}catch(e){console.error(`[Background:Firefox] ${r} - CommandHandler error:`,e),a({status:"error",success:!1,error:e instanceof Error?e.message:"Unknown error"})}else console.error(`[Background:Firefox] ${r} - Cannot route to CommandHandler:`,{hasHandler:!!this.commandHandler,hasTabId:!!n}),a({success:!1,error:"CommandHandler not available or tab ID missing"});return!0}return console.log(`[Background:Firefox] ${r} - Routing to MessageHandler:`,{messageType:e.type,action:e.action}),this.messageHandler?(this.messageHandler.handle(e,t,a),!0):(console.warn(`[Background:Firefox] ${r} - No handler available for message:`,e),!1)}),n.log("BackgroundService (Firefox): Message listener registered")}setupCommandListener(){browser.commands.onCommand.addListener(e=>{this.commandHandler&&browser.tabs.query({active:!0,currentWindow:!0}).then(t=>{t[0]&&this.commandHandler.handle(e,t[0])})}),n.log("BackgroundService (Firefox): Command listener registered")}}).start()})();